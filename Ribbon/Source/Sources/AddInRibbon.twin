
Class AddInRibbon

    Private Const AddInFileName As String = "msaccess-vcs"
	' don't use "Version Control" 
	'     * FileName without " " is simple to use for Application.Run
	'     * "Version Control" has little significance as to what kind of file this is
    Private Const AddInFileNameWithExt As String = AddInFileName & ".accda"

	Implements IDTExtensibility2

	/*
		PLEASE NOTE: make sure you create a DLL of the correct bitness to match your version of VBA
		(e.g. if you're using the 64-bit version of VBA, make sure you change the 'Active Build' in the twinBASIC panel to 'win64')
	*/
	
	[ WithDispatchForwarding ]
	Implements IRibbonExtensibility
	
	/* 
		The [WithDispatchForwarding] attribute seen above is needed so that late-bound calls
		on the IRibbonExtensibility interface get routed to our default interface.
		Without it, events will not fire.
	*/
 
	' Cached copy of the ribbon XML as loaded from the Ribbon.xml file.
	Private strRibbonXML As String
	
	' A reference to the Microsoft Access application
	Private applicationObject As Object
	
	' A reference to the ribbon object
	Private activeRibbon As IRibbonUI
	
    /* 
		Firstly we implement the IDTExtensibility2 interface members
		We don't do anything particularly interesting here, except for taking a reference
		to the Application object provided to us in the OnConnection event
	*/
	Public Sub OnConnection(ByVal Application As Object, _
					 ByVal ConnectMode As ext_ConnectMode, _
					 ByVal AddInInst As Object, _
					 ByRef custom As Variant()) Implements IDTExtensibility2.OnConnection
		
		'MsgBox "MyCOMAddin.OnConnection"
		Set applicationObject = Application
	End Sub
	
	
	Public Sub OnDisconnection(ByVal RemoveMode As ext_DisconnectMode, _
						ByRef custom As Variant()) Implements IDTExtensibility2.OnDisconnection
		
		'MsgBox "MyCOMAddin.OnDisconnection"
		Set applicationObject = Nothing
	End Sub
	
	
	Public Sub OnAddInsUpdate(ByRef custom As Variant()) Implements IDTExtensibility2.OnAddInsUpdate
		
		'MsgBox "MyCOMAddin.OnAddInsUpdate"
	End Sub
	
	
	Public Sub OnStartupComplete(ByRef custom As Variant()) Implements IDTExtensibility2.OnStartupComplete
		
		'MsgBox "MyCOMAddin.OnStartupComplete"
	End Sub
	
	
	Public Sub OnBeginShutdown(ByRef custom As Variant()) Implements IDTExtensibility2.OnBeginShutdown
		Set activeRibbon = Nothing
		'MsgBox "MyCOMAddin.OnBeginShutdown"
	End Sub
	
	
	/* 
		Next we implement IRibbonExtensibility.GetCustomUI which lets us provide
		a ribbon XML string to the host
	*/
	Private Function GetCustomUI(ByVal RibbonID As String) As String Implements IRibbonExtensibility.GetCustomUI
		
		' Load XML to cached variable if needed
		If Me.strRibbonXML = vbNullString Then Me.strRibbonXML = LoadXMLFile
		
		Return Me.strRibbonXML
	End Function
	
	
	/* 
		Load the XML ribbon content from a file.
	*/
	Private Function LoadXMLFile() As String
		' Expects the XML file to be in the add-in folder.
		Dim strPath As String = App.Path & "\Ribbon.xml"
		Dim strContent As String
		
		' If the file exists, load the XML
		If FSO.FileExists(strPath) Then
			With New ADODB.Stream
				.Charset = "utf-8"
				.Open
				.LoadFromFile strPath
				strContent = .ReadText
				.Close
			End With
		End If
		
		Return strContent
	End Function
    
    /*
        Check requirements to start add-in function
    */
    Private Function VerifyAccessAddinRequirements() As Boolean
    	
        If applicationObject.VBE.ActiveVBProject Is Nothing Then
            MsgBox "Please open a database file before using this add-in", vbInformation
            Exit Function
        End If
        
        If Not FSO.FileExists(AddInFile) Then
        	MsgBox "Please reinstall add-in (accda file is missing)."
            Exit Function
        End If
        
        VerifyAccessAddinRequirements = True
        
    End Function
		
	Private Property Get AddInFile() As String
        AddInFile = App.Path & "\" & AddInFileNameWithExt
	End Property
	
    Private Property Get AddInCallPath() As String
    	AddInCallPath = App.Path & "\" & AddInFileName
    End Property

	/*
		Wrapper for the file system object
	*/
	Private Function FSO() As FileSystemObject
		Static objFSO As FileSystemObject
		If objFSO Is Nothing Then Set objFSO = New FileSystemObject
		Return objFSO
	End Function

	
	/*
		Primary ribbon callback function. Relay control ID back to add-in for execution.
	*/
	Public Sub OnActionButton(control As IRibbonControl)
		If VerifyAccessAddinRequirements Then
			' Pass the control ID to the handler function
            applicationObject.Run AddInCallPath & ".HandleRibbonCommand", control.Id
		End If
	End Sub
	
	
	/*
		Stub functions for default ribbon callbacks. (Not currently used)
	*/
	Public Function GetVisible(control As IRibbonControl) As Boolean
		' Always show all buttons for now.
		Return True
	End Function
	
	
	Public Function GetEnabled(control As IRibbonControl) As Boolean
		' Always enable all buttons for now.
		Return True
	End Function
	
	
	Public Sub OnRibbonLoad(ribbon As IRibbonUI)
		' Save reference to ribbon object
		Set activeRibbon = ribbon
	End Sub
End Class
