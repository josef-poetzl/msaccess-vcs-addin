name: Build-self-hosted (on release)

on:
  release:
    types: [published]

permissions:
  contents: write
  id-token: write
  attestations: write

jobs:
  build:
    runs-on: [self-hosted, Windows, Office]

    steps:
    - name: "Checkout code for release tag"
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name }}

    - name: "Build Access file (accdb/accde)"
      id: build_access_file
      uses: AccessCodeLib/msaccess-vcs-build@main
      with:
        source-dir: "./Version Control.accda.src"
        vcs-url: "https://api.github.com/repos/josef-poetzl/msaccess-vcs-addin/releases/tags/v4.1.2-build"
      timeout-minutes: 10

    - name: "Create versioned ZIP file"
      run: |
        $zipName = "Version_Control_${{ github.event.release.tag_name }}.zip"
        Compress-Archive -Path .\bin\* -DestinationPath $zipName
        echo "ZIP_NAME=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: "Upload ZIP to GitHub Release"
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ZIP_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: "Calculate SHA256 of ZIP"
      id: hash
      shell: pwsh
      run: |
        $zipName = "${{ env.ZIP_NAME }}"
        $hash = Get-FileHash -Algorithm SHA256 -Path $zipName
        $digest = "sha256:$($hash.Hash.ToLower())"
        echo "ZIP_DIGEST=$digest" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "digest=$digest" >> $env:GITHUB_OUTPUT

    - name: "Attestation"
      uses: actions/attest-build-provenance@v2
      id: attestation
      with:
        subject-name: "${{ env.ZIP_NAME }}"
        subject-digest: "${{ steps.hash.outputs.digest }}"

    - name: "Get attestation ID from GitHub API"
      id: get_attestation_id
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO: ${{ github.repository }}
        OWNER: ${{ github.repository_owner }}
        TAG: ${{ github.event.release.tag_name }}
      shell: pwsh
      run: |
        $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN"; Accept = "application/vnd.github+json" }
        $url = "https://api.github.com/repos/$env:REPO/attestations"
        $response = Invoke-RestMethod -Uri $url -Headers $headers

        # Filtern nach Attestation mit subject.name == ZIP_NAME
        $zipName = "${{ env.ZIP_NAME }}"
        $attestation = $response | Where-Object { $_.subject.name -eq $zipName } | Select-Object -First 1

        if (-not $attestation) {
          Write-Error "No attestation found for $zipName"
          exit 1
        }

        $attestationId = $attestation.id
        Write-Host "Attestation ID: $attestationId"
        echo "attestation_id=$attestationId" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append


    - name: "Update release description with attestation URL"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO: ${{ github.repository }}
        TAG: ${{ github.event.release.tag_name }}
      run: |
        # Alte Release Notes holen
        OLD_BODY=$(gh release view $TAG --repo $REPO --json body --template '{{.body}}')
        
        ATTESTATION_URL="https://github.com/${REPO}/attestations/${{ steps.get_attestation_id.outputs.attestation_id }}"

        NEW_BODY="${OLD_BODY}\n\nAttestation: ${ATTESTATION_URL}"

        # Release Notes updaten
        gh release edit $TAG --repo $REPO --notes "$NEW_BODY"
      # Ben√∂tigt GitHub CLI installiert im Runner
